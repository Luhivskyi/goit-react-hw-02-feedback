{"version":3,"sources":["Components/Statistics.js","Components/FeedbackOptions.js","Components/Section.js","Components/Notification.js","Components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Math","floor","FeedbackOptions","options","handleClickButton","map","elem","onClick","Section","title","children","Notification","message","App","state","type","setState","prevState","countTotalFeedback","Object","values","reduce","item","countPositiveFeedbackPercentage","positiveFeedback","this","positiveFeedbacks","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAyBeA,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,qDACgC,IAAVA,EAAcE,KAAKC,MAAMF,GAAsB,EADrE,WCaWG,EAnBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,kBAAZ,OAEpB,mCACKD,EAAQE,KAAI,SAAAC,GAAI,OAEb,wBAAmBC,QAAS,kBAAMH,EAAmBE,IAArD,SAA8DA,GAAjDA,SCQVE,EAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCIUC,EAPM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC4D3BC,E,4MAxDbC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,kBAAoB,SAAAW,GAClB,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJF,EAAOE,EAAUF,GAAQ,O,EAKhCG,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKN,OAAOO,QAC/B,SAACvB,EAAOwB,GAAR,OAAkBxB,EAASwB,IAC3B,I,EAIJC,gCAAkC,SAACzB,EAAO0B,GACxC,OAAQA,EAAmB1B,EAAS,K,4CAGtC,WACE,IAAMA,EAAQ2B,KAAKP,qBACbQ,EAAoBD,KAAKF,gCAC7BzB,EACA2B,KAAKX,MAAMnB,MAEb,OACE,gCACE,cAAC,EAAD,CAASc,MAAM,wBAAf,SACE,cAAC,EAAD,CACEN,QAAS,CAAC,OAAQ,MAAO,WACzBC,kBAAmBqB,KAAKrB,sBAG5B,cAAC,EAAD,CAASK,MAAM,aAAf,SACa,IAAVX,EACC,cAAC,EAAD,CACEH,KAAM8B,KAAKX,MAAMnB,KACjBC,QAAS6B,KAAKX,MAAMlB,QACpBC,IAAK4B,KAAKX,MAAMjB,IAChBC,MAAOA,EACPC,mBAAoB2B,IAGtB,cAAC,EAAD,CAAcd,QAAQ,+B,GAlDhBe,IAAMC,WCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.593da5c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <ul>\r\n    <li>Good:{good}</li>\r\n    <li>Neutral:{neutral}</li>\r\n    <li>Bad:{bad}</li>\r\n    <li>Total:{total}</li>\r\n    <li>\r\n      Positive feedback: {total !== 0 ? Math.floor(positivePercentage) : 0}%\r\n    </li>\r\n  </ul>\r\n);\r\n\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n   bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, handleClickButton }) => (\r\n    \r\n    <>\r\n        {options.map(elem => (\r\n\r\n            <button key={elem} onClick={() => handleClickButton( elem )}>{elem }</button>\r\n            \r\n        ))}\r\n    </>\r\n\r\n\r\n)\r\n\r\nFeedbackOptions.propTypes = {\r\n   options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  handleClickButton: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h1>{title}</h1>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n   title: PropTypes.string.isRequired,\r\n   children: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n   message: PropTypes.string.isRequired,\r\n  \r\n};\r\n\r\nexport default Notification;","import React from 'react';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Section from './Section';\nimport Notification from './Notification';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleClickButton = type => {\n    this.setState(prevState => {\n      return {\n        [type]: prevState[type] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce(\n      (total, item) => (total += item),\n      0,\n    );\n  };\n\n  countPositiveFeedbackPercentage = (total, positiveFeedback) => {\n    return (positiveFeedback / total) * 100;\n  };\n\n  render() {\n    const total = this.countTotalFeedback();\n    const positiveFeedbacks = this.countPositiveFeedbackPercentage(\n      total,\n      this.state.good,\n    );\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'bad', 'neutral']}\n            handleClickButton={this.handleClickButton}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {total !== 0 ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={total}\n              positivePercentage={positiveFeedbacks}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}